// Code generated by goctl. DO NOT EDIT!
// Source: post.proto

package service

import (
	"context"

	"go-demo/service/post/rpc/types/post"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddPostReq      = post.AddPostReq
	AddPostResp     = post.AddPostResp
	DelPostReq      = post.DelPostReq
	DelPostResp     = post.DelPostResp
	GetPostByIdReq  = post.GetPostByIdReq
	GetPostByIdResp = post.GetPostByIdResp
	Post            = post.Post
	SearchPostReq   = post.SearchPostReq
	SearchPostResp  = post.SearchPostResp
	UpdatePostReq   = post.UpdatePostReq
	UpdatePostResp  = post.UpdatePostResp

	Service interface {
		// -----------------------Post-----------------------
		AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*AddPostResp, error)
		UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
		DelPost(ctx context.Context, in *DelPostReq, opts ...grpc.CallOption) (*DelPostResp, error)
		GetPostById(ctx context.Context, in *GetPostByIdReq, opts ...grpc.CallOption) (*GetPostByIdResp, error)
		SearchPost(ctx context.Context, in *SearchPostReq, opts ...grpc.CallOption) (*SearchPostResp, error)
	}

	defaultService struct {
		cli zrpc.Client
	}
)

func NewService(cli zrpc.Client) Service {
	return &defaultService{
		cli: cli,
	}
}

// -----------------------Post-----------------------
func (m *defaultService) AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*AddPostResp, error) {
	client := post.NewServiceClient(m.cli.Conn())
	return client.AddPost(ctx, in, opts...)
}

func (m *defaultService) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	client := post.NewServiceClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultService) DelPost(ctx context.Context, in *DelPostReq, opts ...grpc.CallOption) (*DelPostResp, error) {
	client := post.NewServiceClient(m.cli.Conn())
	return client.DelPost(ctx, in, opts...)
}

func (m *defaultService) GetPostById(ctx context.Context, in *GetPostByIdReq, opts ...grpc.CallOption) (*GetPostByIdResp, error) {
	client := post.NewServiceClient(m.cli.Conn())
	return client.GetPostById(ctx, in, opts...)
}

func (m *defaultService) SearchPost(ctx context.Context, in *SearchPostReq, opts ...grpc.CallOption) (*SearchPostResp, error) {
	client := post.NewServiceClient(m.cli.Conn())
	return client.SearchPost(ctx, in, opts...)
}
