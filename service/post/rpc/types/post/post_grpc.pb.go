// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: post/rpc/post.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// -----------------------Post-----------------------
	AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*AddPostResp, error)
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
	DelPost(ctx context.Context, in *DelPostReq, opts ...grpc.CallOption) (*DelPostResp, error)
	GetPostById(ctx context.Context, in *GetPostByIdReq, opts ...grpc.CallOption) (*GetPostByIdResp, error)
	SearchPost(ctx context.Context, in *SearchPostReq, opts ...grpc.CallOption) (*SearchPostResp, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*AddPostResp, error) {
	out := new(AddPostResp)
	err := c.cc.Invoke(ctx, "/post.service/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	out := new(UpdatePostResp)
	err := c.cc.Invoke(ctx, "/post.service/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DelPost(ctx context.Context, in *DelPostReq, opts ...grpc.CallOption) (*DelPostResp, error) {
	out := new(DelPostResp)
	err := c.cc.Invoke(ctx, "/post.service/DelPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPostById(ctx context.Context, in *GetPostByIdReq, opts ...grpc.CallOption) (*GetPostByIdResp, error) {
	out := new(GetPostByIdResp)
	err := c.cc.Invoke(ctx, "/post.service/GetPostById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchPost(ctx context.Context, in *SearchPostReq, opts ...grpc.CallOption) (*SearchPostResp, error) {
	out := new(SearchPostResp)
	err := c.cc.Invoke(ctx, "/post.service/SearchPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// -----------------------Post-----------------------
	AddPost(context.Context, *AddPostReq) (*AddPostResp, error)
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResp, error)
	DelPost(context.Context, *DelPostReq) (*DelPostResp, error)
	GetPostById(context.Context, *GetPostByIdReq) (*GetPostByIdResp, error)
	SearchPost(context.Context, *SearchPostReq) (*SearchPostResp, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) AddPost(context.Context, *AddPostReq) (*AddPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (UnimplementedServiceServer) UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedServiceServer) DelPost(context.Context, *DelPostReq) (*DelPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPost not implemented")
}
func (UnimplementedServiceServer) GetPostById(context.Context, *GetPostByIdReq) (*GetPostByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}
func (UnimplementedServiceServer) SearchPost(context.Context, *SearchPostReq) (*SearchPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPost not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.service/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddPost(ctx, req.(*AddPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.service/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.service/DelPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DelPost(ctx, req.(*DelPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.service/GetPostById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPostById(ctx, req.(*GetPostByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.service/SearchPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchPost(ctx, req.(*SearchPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPost",
			Handler:    _Service_AddPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Service_UpdatePost_Handler,
		},
		{
			MethodName: "DelPost",
			Handler:    _Service_DelPost_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _Service_GetPostById_Handler,
		},
		{
			MethodName: "SearchPost",
			Handler:    _Service_SearchPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post/rpc/post.proto",
}
