// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postFieldNames          = builder.RawFieldNames(&Post{})
	postRows                = strings.Join(postFieldNames, ",")
	postRowsExpectAutoSet   = strings.Join(stringx.Remove(postFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	postRowsWithPlaceHolder = strings.Join(stringx.Remove(postFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	postModel interface {
		Insert(ctx context.Context, data *Post) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Post, error)
		Update(ctx context.Context, data *Post) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPostModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Post struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"createdAt"`
		UpdatedAt time.Time `db:"updatedAt"`
		Title     string    `db:"title"`
		Published int64     `db:"published"`
		Desc      string    `db:"desc"`
	}
)

func newPostModel(conn sqlx.SqlConn) *defaultPostModel {
	return &defaultPostModel{
		conn:  conn,
		table: "`Post`",
	}
}

func (m *defaultPostModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPostModel) FindOne(ctx context.Context, id int64) (*Post, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postRows, m.table)
	var resp Post
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostModel) Insert(ctx context.Context, data *Post) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, postRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.Title, data.Published, data.Desc)
	return ret, err
}

func (m *defaultPostModel) Update(ctx context.Context, data *Post) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.Title, data.Published, data.Desc, data.Id)
	return err
}

func (m *defaultPostModel) tableName() string {
	return m.table
}
