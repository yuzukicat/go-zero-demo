// Code generated by goctl. DO NOT EDIT!
// Source: comment.proto

package service

import (
	"context"

	"go-demo/service/comment/rpc/types/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentReq      = comment.AddCommentReq
	AddCommentResp     = comment.AddCommentResp
	Comment            = comment.Comment
	DelCommentReq      = comment.DelCommentReq
	DelCommentResp     = comment.DelCommentResp
	GetCommentByIdReq  = comment.GetCommentByIdReq
	GetCommentByIdResp = comment.GetCommentByIdResp
	SearchCommentReq   = comment.SearchCommentReq
	SearchCommentResp  = comment.SearchCommentResp
	UpdateCommentReq   = comment.UpdateCommentReq
	UpdateCommentResp  = comment.UpdateCommentResp

	Service interface {
		// -----------------------Comment-----------------------
		AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
		UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error)
		DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error)
		GetCommentById(ctx context.Context, in *GetCommentByIdReq, opts ...grpc.CallOption) (*GetCommentByIdResp, error)
		SearchComment(ctx context.Context, in *SearchCommentReq, opts ...grpc.CallOption) (*SearchCommentResp, error)
	}

	defaultService struct {
		cli zrpc.Client
	}
)

func NewService(cli zrpc.Client) Service {
	return &defaultService{
		cli: cli,
	}
}

// -----------------------Comment-----------------------
func (m *defaultService) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	client := comment.NewServiceClient(m.cli.Conn())
	return client.AddComment(ctx, in, opts...)
}

func (m *defaultService) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error) {
	client := comment.NewServiceClient(m.cli.Conn())
	return client.UpdateComment(ctx, in, opts...)
}

func (m *defaultService) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error) {
	client := comment.NewServiceClient(m.cli.Conn())
	return client.DelComment(ctx, in, opts...)
}

func (m *defaultService) GetCommentById(ctx context.Context, in *GetCommentByIdReq, opts ...grpc.CallOption) (*GetCommentByIdResp, error) {
	client := comment.NewServiceClient(m.cli.Conn())
	return client.GetCommentById(ctx, in, opts...)
}

func (m *defaultService) SearchComment(ctx context.Context, in *SearchCommentReq, opts ...grpc.CallOption) (*SearchCommentResp, error) {
	client := comment.NewServiceClient(m.cli.Conn())
	return client.SearchComment(ctx, in, opts...)
}
