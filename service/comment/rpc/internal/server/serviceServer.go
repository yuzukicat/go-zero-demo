// Code generated by goctl. DO NOT EDIT!
// Source: comment.proto

package server

import (
	"context"

	"go-demo/service/comment/rpc/internal/logic"
	"go-demo/service/comment/rpc/internal/svc"
	"go-demo/service/comment/rpc/types/comment"
)

type ServiceServer struct {
	svcCtx *svc.ServiceContext
	comment.UnimplementedServiceServer
}

func NewServiceServer(svcCtx *svc.ServiceContext) *ServiceServer {
	return &ServiceServer{
		svcCtx: svcCtx,
	}
}

// -----------------------Comment-----------------------
func (s *ServiceServer) AddComment(ctx context.Context, in *comment.AddCommentReq) (*comment.AddCommentResp, error) {
	l := logic.NewAddCommentLogic(ctx, s.svcCtx)
	return l.AddComment(in)
}

func (s *ServiceServer) UpdateComment(ctx context.Context, in *comment.UpdateCommentReq) (*comment.UpdateCommentResp, error) {
	l := logic.NewUpdateCommentLogic(ctx, s.svcCtx)
	return l.UpdateComment(in)
}

func (s *ServiceServer) DelComment(ctx context.Context, in *comment.DelCommentReq) (*comment.DelCommentResp, error) {
	l := logic.NewDelCommentLogic(ctx, s.svcCtx)
	return l.DelComment(in)
}

func (s *ServiceServer) GetCommentById(ctx context.Context, in *comment.GetCommentByIdReq) (*comment.GetCommentByIdResp, error) {
	l := logic.NewGetCommentByIdLogic(ctx, s.svcCtx)
	return l.GetCommentById(in)
}

func (s *ServiceServer) SearchComment(ctx context.Context, in *comment.SearchCommentReq) (*comment.SearchCommentResp, error) {
	l := logic.NewSearchCommentLogic(ctx, s.svcCtx)
	return l.SearchComment(in)
}
